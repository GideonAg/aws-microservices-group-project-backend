AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Task Management System SAM Template
Globals:
  Function:
    Timeout: 30
    Runtime: java21
    MemorySize: 256
    Environment:
      Variables:
        USER_POOL_ID:
          Ref: UserPool
        USER_POOL_CLIENT_ID:
          Ref: UserPoolClient
        TASK_TABLE:
          Ref: TaskTable
        USER_TABLE:
          Ref: UserTable
        TASK_ASSIGNMENT_TOPIC_ARN:
          Ref: TaskAssignmentNotificationTopic
        TASK_DEADLINE_TOPIC_ARN:
          Ref: TaskDeadlineNotificationTopic
        CLOSED_TASK_TOPIC_ARN:
          Ref: ClosedTaskNotificationTopic
        REOPENED_TASK_TOPIC_ARN:
          Ref: ReopenedTasksNotificationTopic
        TASK_COMPLETE_TOPIC_ARN:
          Ref: TaskCompleteNotificationTopic
        TASKS_QUEUE_URL:
          Ref: TasksQueue
        TASKS_DLQ_URL:
          Ref: TasksDeadLetterQueue
        USER_ONBOARDING_STATE_MACHINE_ARN:
          Fn::GetAtt:
          - UserOnboardingStateMachine
          - Arn
        REGION:
          Ref: AWS::Region
Parameters:
  StageName:
    Type: String
    Description: Environment stage (e.g. dev, staging, prod)
  AdminEmail:
    Type: String
    Description: Email address for the initial admin user
Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: TaskManagementUserPool-${StageName}
      AutoVerifiedAttributes:
      - email
      UsernameAttributes:
      - email
      MfaConfiguration: 'OFF'
      Schema:
      - Name: email
        AttributeDataType: String
        Mutable: true
        Required: true
      - Name: role
        AttributeDataType: String
        Mutable: true
        Required: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: Your username is {username} and temporary password is {####}.
            Please login to the Task Management System at {##URL##}
          EmailSubject: Your Task Management System login details
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: UserPool
      ClientName:
        Fn::Sub: TaskManagementClient-${StageName}
      GenerateSecret: false
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      PreventUserExistenceErrors: ENABLED
  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId:
        Ref: UserPool
      Username:
        Ref: AdminEmail
      UserAttributes:
      - Name: email
        Value:
          Ref: AdminEmail
      - Name: custom:role
        Value: admin
      DesiredDeliveryMediums:
      - EMAIL
  TaskTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: TaskManagement-Tasks-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: taskId
        AttributeType: S
      - AttributeName: assignedUserEmail
        AttributeType: S
      - AttributeName: status
        AttributeType: S
      KeySchema:
      - AttributeName: taskId
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: AssigneeIndex
        KeySchema:
        - AttributeName: assignedUserEmail
          KeyType: HASH
        - AttributeName: status
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: TaskManagement-Users-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      - AttributeName: email
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: EmailIndex
        KeySchema:
        - AttributeName: email
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  TaskAssignmentNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: TaskAssignmentNotificationTopic-${StageName}
      DisplayName: Task Assignment
  TaskAssignmentNotificationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
      - Ref: TaskAssignmentNotificationTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: '*'
          Action:
          - sns:Subscribe
          - sns:Receive
          Resource:
            Ref: TaskAssignmentNotificationTopic
          Condition:
            StringEquals:
              sns:Protocol: email
  TaskDeadlineNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: TaskDeadlineNotificationTopic-${StageName}
      DisplayName: Task Deadline
  ClosedTaskNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: ClosedTaskNotificationTopic-${StageName}
      DisplayName: Closed Task
  ReopenedTasksNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: ReopenedTasksNotificationTopic-${StageName}
      DisplayName: Reopened Task
  TaskCompleteNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: TaskCompleteNotificationTopic-${StageName}
      DisplayName: Task Complete
  TasksQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Sub: TasksQueue-${StageName}.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - TasksDeadLetterQueue
          - Arn
        maxReceiveCount: 3
  TasksDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Sub: TasksDeadLetterQueue-${StageName}.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Ref: StageName
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - UserPool
              - Arn
      Cors:
        AllowMethods: '''*'''
        AllowHeaders: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key'''
        AllowOrigin: '''*'''
  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CreateUserFunction
      Handler: com.taskmanagementsystem.auth.CreateUserHandler::handleRequest
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminSetUserPassword
          Resource:
            Fn::GetAtt:
            - UserPool
            - Arn
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          Resource:
            Fn::GetAtt:
            - UserTable
            - Arn
        - Effect: Allow
          Action:
          - states:StartExecution
          Resource:
            Fn::GetAtt:
            - UserOnboardingStateMachine
            - Arn
        - Effect: Allow
          Action:
          - sns:Subscribe
          - sns:Publish
          Resource:
          - Ref: TaskAssignmentNotificationTopic
          - Ref: TaskDeadlineNotificationTopic
          - Ref: ClosedTaskNotificationTopic
          - Ref: ReopenedTasksNotificationTopic
      Events:
        CreateUser:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /users
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.CreateUserFunction074e25f7DepLayer
    Metadata:
      SamResourceId: CreateUserFunction
  AuthenticationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: AuthenticationFunction
      Handler: com.taskmanagementsystem.auth.AuthenticationHandler::handleRequest
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: cognito-idp:InitiateAuth
          Resource: '*'
      Events:
        Authentication:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /auth
            Method: POST
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.AuthenticationFunctionc58646baDepLayer
    Metadata:
      SamResourceId: AuthenticationFunction
  CreateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CreateTaskFunction
      Handler: com.taskmanagementsystem.tasks.CreateTaskHandler::handleRequest
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          Resource:
            Fn::GetAtt:
            - TaskTable
            - Arn
        - Effect: Allow
          Action:
          - sqs:SendMessage
          Resource:
            Fn::GetAtt:
            - TasksQueue
            - Arn
        - Effect: Allow
          Action:
          - cognito-idp:ListUsers
          Resource:
            Fn::GetAtt:
            - UserPool
            - Arn
      Events:
        CreateTask:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /tasks
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.CreateTaskFunctione60355daDepLayer
    Metadata:
      SamResourceId: CreateTaskFunction
  GetTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetTasksFunction
      Handler: com.taskmanagementsystem.tasks.GetTasksHandler::handleRequest
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:Query
          - dynamodb:Scan
          Resource:
          - Fn::GetAtt:
            - TaskTable
            - Arn
          - Fn::Sub: ${TaskTable.Arn}/index/AssigneeIndex
      Events:
        GetTasks:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /tasks
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.GetTasksFunctioncff8d29aDepLayer
    Metadata:
      SamResourceId: GetTasksFunction
  GetTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetTaskFunction
      Handler: com.taskmanagementsystem.tasks.GetTaskHandler::handleRequest
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:GetItem
          Resource:
            Fn::GetAtt:
            - TaskTable
            - Arn
      Events:
        GetTask:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /tasks/{taskId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.GetTaskFunction65c96ae3DepLayer
    Metadata:
      SamResourceId: GetTaskFunction
  UpdateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UpdateTaskFunction
      Handler: com.taskmanagementsystem.tasks.UpdateTaskHandler::handleRequest
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:UpdateItem
          Resource:
            Fn::GetAtt:
            - TaskTable
            - Arn
        - Effect: Allow
          Action:
          - sns:Publish
          Resource:
          - Ref: TaskCompleteNotificationTopic
          - Ref: ReopenedTasksNotificationTopic
      Events:
        UpdateTask:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /tasks/{taskId}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.UpdateTaskFunction1c58c0ffDepLayer
    Metadata:
      SamResourceId: UpdateTaskFunction
  ReassignTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ReassignTaskFunction
      Handler: com.taskmanagementsystem.tasks.ReassignTaskHandler::handleRequest
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:Query
          Resource:
          - Fn::GetAtt:
            - TaskTable
            - Arn
          - Fn::GetAtt:
            - UserTable
            - Arn
          - Fn::Sub: ${UserTable.Arn}/index/EmailIndex
        - Effect: Allow
          Action:
          - sqs:SendMessage
          Resource:
            Fn::GetAtt:
            - TasksQueue
            - Arn
        - Effect: Allow
          Action:
          - sns:Publish
          - sns:Subscribe
          Resource:
            Ref: TaskAssignmentNotificationTopic
      Events:
        ReassignTask:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /tasks/{taskId}/reassign
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.ReassignTaskFunction291e5143DepLayer
    Metadata:
      SamResourceId: ReassignTaskFunction
  ProcessTaskQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ProcessTaskQueueFunction
      Handler: com.taskmanagementsystem.notifications.ProcessTaskQueueHandler::handleRequest
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sns:Publish
          Resource:
            Ref: TaskAssignmentNotificationTopic
        - Effect: Allow
          Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:Query
          Resources:
          - Fn::GetAtt:
            - TaskTable
            - Arn
          - Fn::GetAtt:
            - UserTable
            - Arn
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - TasksQueue
              - Arn
            BatchSize: 1
            FunctionResponseTypes:
            - ReportBatchItemFailures
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.ProcessTaskQueueFunction26e70030DepLayer
    Metadata:
      SamResourceId: ProcessTaskQueueFunction
  TaskDeadlineNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: TaskDeadlineNotificationFunction
      Handler: com.taskmanagementsystem.notifications.TaskDeadlineNotificationHandler::handleRequest
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sns:Publish
          Resource:
            Ref: TaskDeadlineNotificationTopic
        - Effect: Allow
          Action:
          - dynamodb:Scan
          Resource:
            Fn::GetAtt:
            - TaskTable
            - Arn
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.TaskDeadlineNotificationFunctionea093963DepLayer
    Metadata:
      SamResourceId: TaskDeadlineNotificationFunction
  ProcessExpiredTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ProcessExpiredTaskFunction
      Handler: com.taskmanagementsystem.notifications.ProcessExpiredTaskHandler::handleRequest
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sns:Publish
          Resource:
            Ref: ClosedTaskNotificationTopic
        - Effect: Allow
          Action:
          - dynamodb:UpdateItem
          Resource:
            Fn::GetAtt:
            - TaskTable
            - Arn
        - Effect: Allow
          Action:
          - states:StartExecution
          Resource:
            Fn::GetAtt:
            - TaskExpirationStateMachine
            - Arn
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.ProcessExpiredTaskFunctionaa41639fDepLayer
    Metadata:
      SamResourceId: ProcessExpiredTaskFunction
  TaskExpirationStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ../../statemachines/taskExpiration.asl.json
      Type: STANDARD
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:UpdateItem
          Resource:
            Fn::GetAtt:
            - TaskTable
            - Arn
        - Effect: Allow
          Action:
          - sns:Publish
          Resource:
            Ref: ClosedTaskNotificationTopic
  CloseTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CloseTaskFunction
      Handler: com.taskmanagementsystem.tasks.CloseTaskHandler::handleRequest
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:UpdateItem
          Resource:
            Fn::GetAtt:
            - TaskTable
            - Arn
        - Effect: Allow
          Action:
          - sns:Publish
          Resource:
            Ref: ClosedTaskNotificationTopic
        - Effect: Allow
          Action:
          - cognito-idp:AdminGetUser
          Resource:
            Fn::GetAtt:
            - UserPool
            - Arn
      Events:
        CloseTask:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /tasks/{taskId}/close
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.CloseTaskFunction62bca15eDepLayer
    Metadata:
      SamResourceId: CloseTaskFunction
  UserOnboardingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ../../statemachines/userOnboarding.asl.json
      DefinitionSubstitutions:
        TaskAssignmentNotificationTopic:
          Ref: TaskAssignmentNotificationTopic
        TaskDeadlineNotificationTopic:
          Ref: TaskDeadlineNotificationTopic
        ClosedTaskNotificationTopic:
          Ref: ClosedTaskNotificationTopic
        TaskCompleteNotificationTopic:
          Ref: TaskCompleteNotificationTopic
        ReopenedTasksNotificationTopic:
          Ref: ReopenedTasksNotificationTopic
      Type: STANDARD
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sns:Subscribe
          Resource:
          - Ref: TaskAssignmentNotificationTopic
          - Ref: TaskDeadlineNotificationTopic
          - Ref: ClosedTaskNotificationTopic
          - Ref: TaskCompleteNotificationTopic
          - Ref: ReopenedTasksNotificationTopic
  DeadlineReminderRule:
    Type: AWS::Events::Rule
    Properties:
      Name:
        Fn::Sub: TaskDeadlineReminderRule-${StageName}
      Description: Rule to check for tasks nearing deadline
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - TaskDeadlineNotificationFunction
          - Arn
        Id: TaskDeadlineFunction
  DeadlineReminderPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: TaskDeadlineNotificationFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - DeadlineReminderRule
        - Arn
  AwsSamAutoDependencyLayerNestedStack:
    DeletionPolicy: Delete
    Metadata:
      CreatedBy: AWS SAM CLI sync command
    Properties:
      TemplateURL: /home/kinglsey/Desktop/micorservcesLab/aws-microservices-group-project-backend/.aws-sam/auto-dependency-layer/adl_nested_template.yaml
    Type: AWS::CloudFormation::Stack
Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${StageName}
  UserPoolId:
    Description: Cognito User Pool ID
    Value:
      Ref: UserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value:
      Ref: UserPoolClient
  TaskTableName:
    Description: DynamoDB Task Table Name
    Value:
      Ref: TaskTable
  UserTableName:
    Description: DynamoDB User Table Name
    Value:
      Ref: UserTable
